"""
This type stub file was generated by pyright.
"""

from datetime import timedelta
from pathlib import Path
from typing import Any, Callable, Dict, List, Optional, Union

from .leap import LeapProtocol

"""Provides an API to interact with the Lutron Caseta Smart Bridge & RA3 Processor."""
_LOG = ...
LEAP_PORT = ...
PING_INTERVAL = ...
CONNECT_TIMEOUT = ...
REQUEST_TIMEOUT = ...
RECONNECT_DELAY = ...

class Smartbridge:
    """
    A representation of the Lutron Caseta Smart Bridge.

    It uses an SSL interface known as the LEAP server.
    """
    def __init__(self, connect: Callable[[], LeapProtocol]) -> None:
        """Initialize the Smart Bridge."""
        ...

    @property
    def logged_in(self):  # -> bool:
        """Check if the bridge is connected and ready."""
        ...

    async def connect(self) -> None:
        """Connect to the bridge."""
        ...

    @classmethod
    def create_tls(
        cls,
        hostname: str,
        keyfile: Union[str, Path],
        certfile: Union[str, Path],
        ca_certs: Union[str, Path],
        port: int = ...,
    ) -> Smartbridge:  # -> Self@Smartbridge:
        """Initialize the Smart Bridge using TLS over IPv4."""
        ...

    def add_subscriber(self, device_id: str, callback_: Callable[[], None]):  # -> None:
        """
        Add a listener to be notified of state changes.

        :param device_id: device id, e.g. 5
        :param callback_: callback to invoke
        """
        ...

    def add_occupancy_subscriber(
        self, occupancy_group_id: str, callback_: Callable[[], None]
    ):  # -> None:
        """
        Add a listener to be notified of occupancy state changes.

        :param occupancy_group_id: occupancy group id, e.g., 2
        :param callback_: callback to invoke
        """
        ...

    def add_button_subscriber(
        self, button_id: str, callback_: Callable[[str], None]
    ) -> None:
        """
        Add a listener to be notified of button state changes.

        :param button_id: button id, e.g., 2
        :param callback_: callback to invoke
        """
        ...

    def get_devices(self) -> Dict[str, Dict[str, Any]]:
        """Will return all known devices connected to the bridge/processor."""
        ...

    def get_buttons(self) -> Dict[str, Dict[str, Any]]:
        """Will return all known buttons connected to the bridge/processor."""
        ...

    def get_devices_by_domain(self, domain: str) -> List[dict]:
        """
        Return a list of devices for the given domain.

        :param domain: one of 'light', 'switch', 'cover', 'fan' or 'sensor'
        :returns list of zero or more of the devices
        """
        ...

    def get_devices_by_type(self, type_: str) -> List[dict]:
        """
        Will return all devices of a given device type.

        :param type_: LEAP device type, e.g. WallSwitch
        """
        ...

    def get_device_by_zone_id(self, zone_id: str) -> dict:
        """
        Return the first device associated with a given zone.

        Currently each device is mapped to exactly 1 zone

        :param zone_id: the zone id to search for
        :raises KeyError: if the zone id is not present
        """
        ...

    def get_devices_by_types(self, types: List[str]) -> List[dict]:
        """
        Will return all devices for a list of given device types.

        :param types: list of LEAP device types such as WallSwitch, WallDimmer
        """
        ...

    def get_device_by_id(self, device_id: str) -> dict:
        """
        Will return a device with the given ID.

        :param device_id: device id, e.g. 5
        """
        ...

    def get_scenes(self) -> Dict[str, dict]:
        """Will return all known scenes from the Smart Bridge."""
        ...

    def get_scene_by_id(self, scene_id: str) -> dict:
        """
        Will return a scene with the given scene ID.

        :param scene_id: scene id, e.g 23
        """
        ...

    def is_connected(self) -> bool:
        """Will return True if currently connected to the Smart Bridge."""
        ...

    def is_on(self, device_id: str) -> bool:
        """
        Will return True is the device with the given ID is 'on'.

        :param device_id: device id, e.g. 5
        :returns True if level is greater than 0 level, False otherwise
        """
        ...

    async def set_value(
        self, device_id: str, value: int, fade_time: Optional[timedelta] = ...
    ):  # -> None:
        """
        Will set the value for a device with the given ID.

        :param device_id: device id to set the value on
        :param value: integer value from 0 to 100 to set
        :param fade_time: duration for the light to fade from its current value to the
        new value (only valid for lights)
        """
        ...

    async def stop_cover(self, device_id: str):  # -> None:
        """Will stop a cover."""
        ...

    async def raise_cover(self, device_id: str):  # -> None:
        """Will raise a cover."""
        ...

    async def lower_cover(self, device_id: str):  # -> None:
        """Will lower a cover."""
        ...

    async def set_fan(self, device_id: str, value: str):  # -> None:
        """
        Will set the value for a fan device with the given device ID.

        :param device_id: device id to set the value on
        :param value: string value to set the fan to:
        Off, Low, Medium, MediumHigh, High
        """
        ...

    async def set_tilt(self, device_id: str, value: int):  # -> None:
        """
        Set the tilt for tiltable blinds.

        :param device_id: The device ID of the blinds.
        :param value: The desired tilt between 0 and 100.
        """
        ...

    async def turn_on(self, device_id: str, **kwargs):  # -> None:
        """
        Will turn 'on' the device with the given ID.

        :param device_id: device id to turn on
        :param **kwargs: additional parameters for set_value
        """
        ...

    async def turn_off(self, device_id: str, **kwargs):  # -> None:
        """
        Will turn 'off' the device with the given ID.

        :param device_id: device id to turn off
        :param **kwargs: additional parameters for set_value
        """
        ...

    async def activate_scene(self, scene_id: str):  # -> None:
        """
        Will activate the scene with the given ID.

        :param scene_id: scene id, e.g. 23
        """
        ...

    async def tap_button(self, button_id: str):  # -> None:
        """
        Send a press and release message for the given button ID.

        :param button_id: button ID, e.g. 23
        """
        ...

    async def close(self):  # -> None:
        """Disconnect from the bridge."""
        ...
